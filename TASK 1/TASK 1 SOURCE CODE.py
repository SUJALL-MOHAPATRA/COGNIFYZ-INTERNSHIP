# -*- coding: utf-8 -*-
"""TASK 1 FILE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eby8RPeB8VXohzKxwB-KowPXmtWQT8Jj

# **DATASET**
"""

#the common imports
import pandas as pd
import numpy as np

#Github raw file dataset
url='https://raw.githubusercontent.com/SUJALL-MOHAPATRA/DATASETS/refs/heads/main/Cog%20Restro%20Dataset.csv'
df=pd.read_csv(url)
df

df.info()

#less amount of NaN found in Cuisines, rows dropped
df.dropna(subset=['Cuisines'], inplace=True)
df

#no restaurant has average cost as 0
df = df[df['Average Cost for two'] != 0]
df

df.loc[df['Currency'].str.contains('Pounds'), 'Currency'] = 'Pounds(£)'
df['Currency'].unique()

df.describe()

df.info()

df['City'] = df['City'].replace({
    'Bras�_lia': 'Brasilia',
    'S��o Paulo': 'Sao Paulo',
    '��stanbul': 'Istanbul'
})

#better to deal with 1 type of currency
#so taking all in INR
#conversion rates
currency_to_inr = {
    'Botswana Pula(P)': 6.42,
    'Brazilian Real(R$)': 15.74,
    'Dollar($)': 85.51,
    'Emirati Diram(AED)': 23.32,
    'Indian Rupees(Rs.)': 1.0,
    'Indonesian Rupiah(IDR)': 0.005,
    'NewZealand($)': 52.25,
    'Pounds(£)': 117.69,
    'Qatari Rial(QR)': 23.5,
    'Rand(R)': 4.86,
    'Sri Lankan Rupee(LKR)': 0.29,
    'Turkish Lira(TL)': 2.15
}

#money conversion
df['Cost_INR'] = df.apply(
    lambda row: row['Average Cost for two'] * currency_to_inr.get(row['Currency'], 1),
    axis=1
)

df = df.drop(['Average Cost for two', 'Currency'], axis=1)
df = df.rename(columns={'Cost_INR': 'Average Cost for two'})
df.info()

"""# **TASK 1**"""

#dropping unrequired columns
c = ['Restaurant ID', 'Restaurant Name', 'Address', 'Locality', 'Locality Verbose', 'Rating color', 'Rating text']

ndf1 = df.drop(c, axis=1)
ndf1

ndf1['Cuisines']

#changing cuisines to take the first one
ndf1['Cuisines'] = ndf1['Cuisines'].str.split(',').str[0]
ndf1

"""LABEL ENCODING"""

#label encoding cities and cuisines for regression model training
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
ndf1['City_encoded'] = le.fit_transform(ndf1['City'])
ndf1 = ndf1.drop('City', axis=1)
ndf1['Cuisines_encoded'] = le.fit_transform(ndf1['Cuisines'])
ndf1 = ndf1.drop('Cuisines', axis=1)
ndf1

#binary classification of yes and no values
for col in ['Has Table booking', 'Has Online delivery', 'Is delivering now', 'Switch to order menu']:
    ndf1[col] = ndf1[col].map({'Yes': 1, 'No': 0})
ndf1

"""Training and Testing"""

#standard train test split
from sklearn.model_selection import train_test_split
X = ndf1.drop(['Aggregate rating'], axis=1)
y = ndf1['Aggregate rating']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""MODEL"""

#Regression model of Random Forest ensemble
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score,mean_absolute_error

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(f"R² Score: {r2_score(y_test, y_pred)}")

#visualising feauture importance
import pandas as pd
import matplotlib.pyplot as plt

# Feature importances
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({
    'Feature': X_train.columns,
    'Importance': importances
})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot
plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.gca().invert_yaxis()
plt.xlabel("Feature Importance")
plt.ylabel("Features")
plt.title("Feature Importance in Model")
plt.show()

#rating comparison
plt.figure(figsize=(8, 8))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Aggregate Rating")
plt.ylabel("Predicted Aggregate Rating")
plt.title("Actual VS Predicted Aggregate Rating")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.grid(True)
plt.show()

import seaborn as sns

# Set plot style
sns.set(style="whitegrid")

plt.figure(figsize=(8, 5))
sns.scatterplot(data=ndf1, x='Votes', y='Aggregate rating')
plt.title('Votes VS Aggregate Rating')
plt.show()

plt.figure(figsize=(8, 5))
sns.scatterplot(data=ndf1, x='Longitude', y='Aggregate rating')
plt.title('Longitude VS Aggregate Rating')
plt.show()

plt.figure(figsize=(8, 5))
sns.scatterplot(data=ndf1, x='Latitude', y='Aggregate rating')
plt.title('Latitude VS Aggregate Rating')
plt.xticks(rotation=90)
plt.show()