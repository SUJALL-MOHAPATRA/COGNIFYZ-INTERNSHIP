# -*- coding: utf-8 -*-
"""TASK 4 FILE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Ka43e-WmX8lmhukvXhNsjoWNjd5jr1f

# **DATASET**
"""

#the common imports
import pandas as pd
import numpy as np

#Github raw file dataset
url='https://raw.githubusercontent.com/SUJALL-MOHAPATRA/DATASETS/refs/heads/main/Cog%20Restro%20Dataset.csv'
df=pd.read_csv(url)
df

df.info()

#less amount of NaN found in Cuisines, rows dropped
df.dropna(subset=['Cuisines'], inplace=True)
df

#no restaurant has average cost as 0
df = df[df['Average Cost for two'] != 0]
df

df.loc[df['Currency'].str.contains('Pounds'), 'Currency'] = 'Pounds(£)'
df['Currency'].unique()

df.describe()

df.info()

df['City'] = df['City'].replace({
    'Bras�_lia': 'Brasilia',
    'S��o Paulo': 'Sao Paulo',
    '��stanbul': 'Istanbul'
})

#better to deal with 1 type of currency
#so taking all in INR
#conversion rates
currency_to_inr = {
    'Botswana Pula(P)': 6.42,
    'Brazilian Real(R$)': 15.74,
    'Dollar($)': 85.51,
    'Emirati Diram(AED)': 23.32,
    'Indian Rupees(Rs.)': 1.0,
    'Indonesian Rupiah(IDR)': 0.005,
    'NewZealand($)': 52.25,
    'Pounds(£)': 117.69,
    'Qatari Rial(QR)': 23.5,
    'Rand(R)': 4.86,
    'Sri Lankan Rupee(LKR)': 0.29,
    'Turkish Lira(TL)': 2.15
}

#money conversion
df['Cost_INR'] = df.apply(
    lambda row: row['Average Cost for two'] * currency_to_inr.get(row['Currency'], 1),
    axis=1
)

df = df.drop(['Average Cost for two', 'Currency'], axis=1)
df = df.rename(columns={'Cost_INR': 'Average Cost for two'})
df.info()

"""# **TASK 4**"""

ndf4=df.copy()

"""**DISTRIBUTIONS**"""

#Distribution
import plotly.express as px

fig = px.scatter_geo(
    ndf4,
    lat='Latitude',
    lon='Longitude',
    hover_name='City',
    color='City',
    title='Restaurant Distribution Across the World',
    template='plotly_dark',
    opacity=0.6
)
fig.update_geos(fitbounds="locations", visible=True)
fig.show()

#Density
fig = px.density_mapbox(
    ndf4,
    lat='Latitude',
    lon='Longitude',
    z=None,
    radius=10,
    hover_name='City',
    mapbox_style="carto-positron",
    color_continuous_scale='Viridis',
    title='Density of Restaurants by Location',
    zoom=1,
    template='plotly_dark',
    height=600
)
fig.show()

city_counts = ndf4['City'].value_counts().reset_index()
city_counts.columns = ['City', 'Restaurant_Count']
city_counts

"""**TOP CITIES**"""

top_cities = city_counts.head(15)

fig = px.bar(
    top_cities,
    x='City',
    y='Restaurant_Count',
    title='Top 15 Cities with Highest Number of Restaurants',
    text='Restaurant_Count',
    color='Restaurant_Count',
    template='plotly_dark'
)
fig.update_traces(textposition='outside')
fig.update_layout(xaxis_tickangle=-45)
fig.show()

city_stats = ndf4.groupby('City').agg({
    'Aggregate rating': 'mean',
    'Price range': 'mean'
}).reset_index()

city_stats.columns = ['City', 'Avg_Rating', 'Avg_Price_Range']
city_stats = city_stats.sort_values(by='Avg_Rating', ascending=False)
city_stats

top_rated_cities = city_stats.head(15)

fig = px.bar(
    top_rated_cities,
    x='City',
    y='Avg_Rating',
    title='Top 15 Cities by Average Rating',
    color='Avg_Rating',
    text='Avg_Rating',
    template='plotly_dark'
)
fig.update_traces(textposition='outside')
fig.update_layout(xaxis_tickangle=-45)
fig.show()

fig = px.bar(
    city_stats.sort_values(by='Avg_Price_Range', ascending=False).head(15),
    x='City',
    y='Avg_Price_Range',
    title='Top 15 Cities by Average Price Range',
    color='Avg_Price_Range',
    text='Avg_Price_Range',
    template='plotly_dark'
)
fig.update_traces(textposition='outside')
fig.update_layout(xaxis_tickangle=-45)
fig.show()

city_stats['Rating_vs_Cost'] = city_stats['Avg_Rating'] / city_stats['Avg_Price_Range']
top_value_cities = city_stats.sort_values(by='Rating_vs_Cost', ascending=False).head(10)
top_value_cities

from matplotlib import pyplot as plt
top_value_cities['Rating_vs_Cost'].plot(kind='hist', bins=20, title='Rating_vs_Cost')
plt.grid(True, color='gray', linestyle='--', linewidth=0.5)
plt.gca().spines[['top', 'right',]].set_visible(False)