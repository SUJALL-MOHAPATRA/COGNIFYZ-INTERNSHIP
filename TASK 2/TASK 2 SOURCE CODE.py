# -*- coding: utf-8 -*-
"""TASK 2 FILE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VMgFiFQi7tz7qttMoSeptFJBdn3NSmA3

# **DATASET**
"""

#the common imports
import pandas as pd
import numpy as np

#Github raw file dataset
url='https://raw.githubusercontent.com/SUJALL-MOHAPATRA/DATASETS/refs/heads/main/Cog%20Restro%20Dataset.csv'
df=pd.read_csv(url)
df

df.info()

#less amount of NaN found in Cuisines, rows dropped
df.dropna(subset=['Cuisines'], inplace=True)
df

#no restaurant has average cost as 0
df = df[df['Average Cost for two'] != 0]
df

df.loc[df['Currency'].str.contains('Pounds'), 'Currency'] = 'Pounds(£)'
df['Currency'].unique()

df.describe()

df.info()

df['City'] = df['City'].replace({
    'Bras�_lia': 'Brasilia',
    'S��o Paulo': 'Sao Paulo',
    '��stanbul': 'Istanbul'
})

#better to deal with 1 type of currency
#so taking all in INR
#conversion rates
currency_to_inr = {
    'Botswana Pula(P)': 6.42,
    'Brazilian Real(R$)': 15.74,
    'Dollar($)': 85.51,
    'Emirati Diram(AED)': 23.32,
    'Indian Rupees(Rs.)': 1.0,
    'Indonesian Rupiah(IDR)': 0.005,
    'NewZealand($)': 52.25,
    'Pounds(£)': 117.69,
    'Qatari Rial(QR)': 23.5,
    'Rand(R)': 4.86,
    'Sri Lankan Rupee(LKR)': 0.29,
    'Turkish Lira(TL)': 2.15
}

#money conversion
df['Cost_INR'] = df.apply(
    lambda row: row['Average Cost for two'] * currency_to_inr.get(row['Currency'], 1),
    axis=1
)

df = df.drop(['Average Cost for two', 'Currency'], axis=1)
df = df.rename(columns={'Cost_INR': 'Average Cost for two'})
df.info()

"""# **TASK 2**"""

#dropping columns
columns_to_keep = [
    'Restaurant Name', 'City', 'Cuisines',
    'Price range', 'Aggregate rating', 'Votes',
    'Average Cost for two', 'Has Table booking',
    'Has Online delivery', 'Is delivering now',
    'Longitude', 'Latitude'
]
columns_to_drop = list(set(df.columns) - set(columns_to_keep))
ndf2 = df.drop(columns=columns_to_drop)
ndf2

#binary value conversion
ndf2['Has Table booking'] = ndf2['Has Table booking'].map({'Yes': 1, 'No': 0})
ndf2['Has Online delivery'] = ndf2['Has Online delivery'].map({'Yes': 1, 'No': 0})
ndf2['Is delivering now'] = ndf2['Is delivering now'].map({'Yes': 1, 'No': 0})

#binarising and encoding
from sklearn.preprocessing import MultiLabelBinarizer

#working on the cuisine data
ndf2['Cuisines_clean'] = ndf2['Cuisines'].apply(lambda x: [c.strip() for c in x.split(',')])

mlb = MultiLabelBinarizer()
cuisine_encoded = pd.DataFrame(mlb.fit_transform(ndf2['Cuisines_clean']), columns=mlb.classes_, index=ndf2.index)

features = pd.concat([
    ndf2[['Price range', 'Aggregate rating', 'Has Online delivery', 'Has Table booking', 'Is delivering now']],
    cuisine_encoded
], axis=1)
features

#taking user values
user_pref = {
    'Price range': 3,
    'Aggregate rating': 4.0,
    'Has Online delivery': 1,
    'Has Table booking': 0,
    'Is delivering now': 1,
    'Cuisines': ['Italian', 'Japanese']
}

#Creation of user cuisine vector by encoding
user_cuisine_vector = pd.DataFrame(np.zeros((1, len(cuisine_encoded.columns))), columns=cuisine_encoded.columns)

for cuisine in user_pref['Cuisines']:
    if cuisine in user_cuisine_vector.columns:
        user_cuisine_vector[cuisine] = 1

user_vector = pd.DataFrame({
    'Price range': [user_pref['Price range']],
    'Aggregate rating': [user_pref['Aggregate rating']],
    'Has Online delivery': [user_pref['Has Online delivery']],
    'Has Table booking': [user_pref['Has Table booking']],
    'Is delivering now': [user_pref['Is delivering now']]
}, index=[0])

user_vector = pd.concat([user_vector, user_cuisine_vector], axis=1)

#using cosine similarity for content based recommendations
from sklearn.metrics.pairwise import cosine_similarity

#Similarity Scores
similarity_scores = cosine_similarity(user_vector, features)[0]

#Top 10
top_indices = similarity_scores.argsort()[::-1][:10]

#Top recommended restaurants
recommended_restaurants = df.iloc[top_indices][[
    'Restaurant Name', 'City', 'Cuisines', 'Aggregate rating', 'Price range', 'Has Online delivery'
]]

recommended_restaurants